import math

PLAYER_X = 1  
PLAYER_O = -1  
EMPTY = 0  
SIZE = 3  

def print_board(board):
    """Print the current board state."""
    for row in board:
        print(" | ".join(str(cell) if cell != EMPTY else " " for cell in row))
        print("-" * (SIZE * 2 - 1))

def evaluate(board):
    """Evaluate the board to see if there is a winner."""
   
    for row in range(SIZE):
        if board[row][0] == board[row][1] == board[row][2] != EMPTY:
            return 1 if board[row][0] == PLAYER_X else -1
    
    for col in range(SIZE):
        if board[0][col] == board[1][col] == board[2][col] != EMPTY:
            return 1 if board[0][col] == PLAYER_X else -1
    

    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return 1 if board[0][0] == PLAYER_X else -1
    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return 1 if board[0][2] == PLAYER_X else -1
    
    return 0

def is_moves_left(board):
    """Check if there are any moves left on the board."""
    return any(EMPTY in row for row in board)


def minimax(board, depth, is_maximizing_player):
    """Recursive function for Minimax algorithm to evaluate the board."""
    score = evaluate(board)
    
    if score == 1:
        return score - depth
    
    if score == -1:
        return score + depth
    
    if not is_moves_left(board):
        return 0
    
    if is_maximizing_player:
        best = -math.inf
        for row in range(SIZE):
            for col in range(SIZE):
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_X
                    best = max(best, minimax(board, depth + 1, False))
                    board[row][col] = EMPTY 
        return best
    
    else:
        best = math.inf  
        for row in range(SIZE):
            for col in range(SIZE):
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_O 
                    best = min(best, minimax(board, depth + 1, True)) 
                    board[row][col] = EMPTY 
        return best
def find_best_move(board):
    """Find the best move for the AI (Player X)."""
    best_val = -math.inf  
    best_move = (-1, -1)  
    
    for row in range(SIZE):
        for col in range(SIZE):
            if board[row][col] == EMPTY:
                board[row][col] = PLAYER_X 
                move_val = minimax(board, 0, False) 
                board[row][col] = EMPTY 
                
                if move_val > best_val:
                    best_val = move_val 
                    best_move = (row, col)  
    
    return best_move

def player_move(board):
    """Prompt the user to input their move."""
    while True:
        try:
            row, col = map(int, input("Enter your move (row and column) separated by a space (0-based index): ").split())
            
            if 0 <= row < SIZE and 0 <= col < SIZE and board[row][col] == EMPTY:
                board[row][col] = PLAYER_O  
                break
            else:
                print("Invalid move. The cell is either occupied or out of bounds. Try again.")
        
        except (ValueError, IndexError):
            print("Invalid input. Please enter valid row and column numbers (0-2).")

def play_game():
    """Function to play the Tic-Tac-Toe game."""
    board = [[EMPTY] * SIZE for _ in range(SIZE)]  
    
    while True:
        print_board(board)  
        
        print("\nPlayer X's (AI) turn:")
        row, col = find_best_move(board)  
        board[row][col] = PLAYER_X  
        if evaluate(board) == 1:
            print_board(board)
            print("Player X (AI) wins!")
            break
        
        if not is_moves_left(board):  
            print_board(board)
            print("It's a draw!")
            break
        
        print("\nPlayer O's (You) turn:")
        player_move(board)  
        if evaluate(board) == -1:
            print_board(board)
            print("Player O wins!")
            break
        
        if not is_moves_left(board):  
            print_board(board)
            print("It's a draw!")
            break


play_game()
